#!/usr/bin/env python
import subprocess
import rospy
import time
from std_msgs.msg import String, Bool, Float32MultiArray
from camera import capture
from detect import prepare_model, detect_image
from sys import exit

class Decon_SBC_Controller:
	def __init__(self):
		self.model, self.tr = prepare_model()
		self.detection_command_topic = rospy.Subscriber('detect_msg', Bool, self.detection_cb)	
		self.detection_status_topic = rospy.Publisher('detect_status_msg', Float32MultiArray, queue_size=1)
		rospy.init_node("ddetection", anonymous=True, disable_signals=True)
		rospy.loginfo("[Decon] Initiating Detection...")
		rospy.spin()
		
	def detection_cb(self,data):
		response = Float32MultiArray()
		if data.data is False:
			rospy.loginfo("[Decon] Handshake Requested...")	
			response.data = [1]
		else:
			rospy.loginfo("[Decon] Received Detection Command at %s", rospy.get_time())
			bashCommand = "python2.7 /home/nvidia/deconbot/src/turtlebot3/turtlebot3_bringup/scripts/camera.py /home/nvidia/test.png"
			process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
			output, error = process.communicate()
			if process.returncode == 255:
				response.data = [-1]	
			else:
				objects = detect_image("/home/nvidia/test.png",self.model,self.tr)
				response.data = [elem for obj in objects for elem in obj]
				rospy.loginfo("[Decon] The predicted boxes are:" + ','.join([str(elem) for elem in response.data]))
		self.detection_status_topic.publish(response)
		
if __name__ == '__main__':
	try:
		rospy.loginfo("[Decon] Starting ddetection node")
		decon_sbc_controller = Decon_SBC_Controller()
	except rospy.ROSInterruptException:
        	rospy.loginfo("[Decon] Decon ddetection node exiting!")
		pass
